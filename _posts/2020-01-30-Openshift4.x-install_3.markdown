---
layout: post
title:  "오픈쉬프트(openshift) 4.x 설치(install)-3단계: Openshift ansible 실행(작성중)  "
date:   2020-02-03
categories: openshift 4.2 install container platform mirror redhat podman virtualbox ansible
---

RHCOS VM이 생성완료되면 아래 명령어를 통해서 설치를 진행합니다.

## 설치
~~~

export GOVC_URL='ocp-vcenter.int.consol.de'
export GOVC_USERNAME='admin'
export GOVC_PASSWORD='mypassword'
export GOVC_INSECURE=1
export GOVC_DATASTORE='vsanDatastore'

$ journalctl -b -f -u bootkube.service

$ for pod in $(sudo podman ps -a -q); do sudo podman logs $pod; done

Alternatively, collect the host’s container logs using the tail command by running:

# tail -f /var/lib/containers/storage/overlay-containers/*/userdata/ctr.log
Collect the kubelet.service and crio.service service logs from the master and worker hosts using the journalctl command by running:

$ journalctl -b -f -u kubelet.service -u crio.service
Collect the master and worker host container logs using the tail command by running:

$ sudo tail -f /var/log/containers/*

export GOVC_NETWORK="public"

Access journald unit logs under /var/log by running:

$ oc adm node-logs --role=master -u kubelet
Access host file paths under /var/log by running:

$ oc adm node-logs --role=master --path=openshift-apiserver

oc adm -a ${LOCAL_SECRET_JSON} release extract --command=openshift-install "${LOCAL_REGISTRY}/${LOCAL_REPOSITORY}:${OCP_RELEASE}"


$ openshift-install --dir=/root/openshift4 wait-for bootstrap-complete --log-level debug

$ echo | openssl s_client -connect api-int.sparkproda.makecloud.me:6443 | openssl x509 -noout -text


for i in /etc/origin/master/*.crt; do echo $i; openssl x509 -in $i -noout -enddate; done
~~~

## Verification

~~~
$ export KUBECONFIG=ocp4/auth/kubeconfig
$ oc whoami

$ oc get nodes

$ oc get csr
~~~


## Patching the images registry for non-production environment

~~~
$oc project openshift-image-registry
$oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'

 terraform init -get-plugins=true -reconfigure

 [root@bastion vsphere]# pwd
/root/openshift4/installer/upi/vsphere
[root@bastion vsphere]# terraform plan

# clean below folder and files from current directory, where you run `terraform apply`

export VCENTER_DC=Edge


Next, click on “Edit Configuration…” next to the “Configuration Parameters” section. You will add the following:

guestinfo.ignition.config.data and set the value to chageme
guestinfo.ignition.config.data.encoding set this value to base64
disk.EnableUUID set this value to TRUE

rm -rf .terraform
rm terraform.tfstate* in any subfolders

# clean below folder from home directory.
rm ~/.terraform.d/
deploy again.
terraform init
terraform plan
terraform apply

data "vsphere_network" "network" {
  name          = "${var.network}"
  datacenter_id = "${var.datacenter_id}"
}

network_interface {
  network_id = "${data.vsphere_network.network.id}"
}


oc patch configs.imageregistry.operator.openshift.io cluster --type merge --patch '{"spec":{"storage":{"emptyDir":{}}}}'

~~~
